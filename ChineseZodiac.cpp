/*
Chinese Zodiac & Compatibility Test
This program calculates the Chinese Zodiac Number, Animal and Compatibility 
of a user and their friend based on their date of birth
*/
#include<stdio.h>
#include<iostream>

//STRUCTURE DEFINITION
struct birthdayData {
	int Day;
	int Month;
	int Year;
};

//FUNCTION PROTOTYPES
int ZodiacSign(birthdayData);
const char* ZodiacAnimal(int zodiacNumUserInput); 
int isCompatibleZodiac(int ZodiacNumUser, int ZodiacNumUserFriend);

//MAIN FUNCTION
int main() {
	struct birthdayData user; 
	struct birthdayData userFriend;  

	printf("Insert your Birth Date: ");  
	scanf("%i", &user.Day); 

	printf("Insert your Birth Month: "); 
	scanf("%i", &user.Month); 
	
	printf("Insert your Birth Year : "); 
	scanf("%i", &user.Year); 
	printf("\n");
	printf("Insert your Friend's Birth Date: ");  
	scanf("%i", &userFriend.Day);  

	printf("Insert your Friend's Birth Month: ");  
	scanf("%i", &userFriend.Month); 
	 
	printf("Insert your Friend's Birth Year : "); 
	scanf("%i", &userFriend.Year); 
 
	int zodiacNumberUser = ZodiacSign(user);
	int zodiacNumberFriend = ZodiacSign(userFriend);
	printf("\n"); 
	printf("The Zodiac Number of the User is %i \n", zodiacNumberUser);
	printf("The Zodiac Number of the User's friend is %i \n", zodiacNumberFriend); 

	const char* zodiacAnimalUser = ZodiacAnimal(zodiacNumberUser);
	const char* zodiacAnimalFriend = ZodiacAnimal(zodiacNumberFriend); 
	printf("\n");  
	printf("The Zodiac Animal of the User is the %s\n", zodiacAnimalUser);
	printf("The Zodiac Animal of the User's Friend is the %s\n", zodiacAnimalFriend); 

	int usersCompatible = isCompatibleZodiac(zodiacNumberUser, zodiacNumberFriend);
	printf("\n"); 
	if (usersCompatible == 1) { 
		printf("The user's Zodiac Animal is the %s and the user's friend's Zodiac Animal is the %s. You guys are compatible!\n", zodiacAnimalUser, zodiacAnimalFriend);
	}
	else {
		printf("The user's Zodiac Animal is the %s and the user's friend's Zodiac Animal is the %s. You guys are NOT compatible, Oh No!\n", zodiacAnimalUser, zodiacAnimalFriend);
	}

}

//FUNCTION DEFINITIONS

//ZodiacSign function Calculates the Zodiac Number given the data stored in the struct
//Date used for user Input: 10/9/2005
//Values Tested (Excluding User Input): 8/10/2005, 30/10/2005, 30/1/2006, 7/6/2001, 15/7/2002, 27/5/2008
//Results Expected: 9, 10, 10, 5, 6, 0
int ZodiacSign(birthdayData userInput) {
	int localYear = userInput.Year;

	if (userInput.Month == 1 && userInput.Day < 21) { //CNY starts on the 22nd of January. Any value below 21 should be included in the previous year. 
		localYear = userInput.Year - 1; 
	}

	int ZodiacYear = localYear - 1924;
	int signZodiac = ZodiacYear % 12;

	return signZodiac;

}

//ZodiacAnimal function assigns the zodiac animal to its corresponding zodiac number generated by the ZodiacSign Function
//Date used for user Input: 10/9/2005
//Values Tested(Excluding User Input): 8/10/2005, 30/10/2005, 30/1/2006, 7/6/2001, 15/7/2002, 27/5/2008
//Results Expected: Rooster, Rooster, Dog, Snake, Horse, Rat
const char* ZodiacAnimal(int zodiacNumInput) {
	switch (zodiacNumInput) {
	case 1:
		return "Ox";
		break;
	case 2:
		return "Tiger";
		break;
	case 3:
		return "Rabbit";
		break;
	case 4:
		return "Dragon";
		break;
	case 5:
		return "Snake";
		break;
	case 6:
		return "Horse";
		break;
	case 7:
		return "Goat";
		break; 
	case 8:
		return "Monkey";
		break;
	case 9:
		return "Rooster";
		break; 
	case 10:
		return "Dog";
		break;
	case 11:
		return "Pig";
		break;
	default:
		return "Rat";
	}
}
//isCompatibleZodiac determines whether the two Zodiac number inputs are compatible with each other or not
//Date used for user Input: 10/9/2005
//Values Tested(Excluding User Input): 8/10/2005, 30/10/2005, 30/1/2006, 7/6/2001, 15/7/2002, 27/5/2008
//Results Expected: compatible, not compatible, compatible, compatible, not compatible, not compatible
int isCompatibleZodiac(int ZodiacNumUser, int ZodiacNumUserFriend) {
	int firstValue = ZodiacNumUserFriend;
	int secondValue = ZodiacNumUser;

	if (ZodiacNumUser > ZodiacNumUserFriend) {
		firstValue = ZodiacNumUser; 
		secondValue = ZodiacNumUserFriend;
	}
	if (firstValue - secondValue == 0 || firstValue - secondValue == 4 || firstValue - secondValue == 8) {//These are the only values that result in the Zodiac Numbers being compatible
			return 1;
		}
	return 0;
}